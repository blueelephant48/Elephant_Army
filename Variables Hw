{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {
    "vscode": {
     "languageId": "raw"
    }
   },
   "source": [
    "---\n",
    "layout: post\n",
    "title: Variables Homework\n",
    "description: Answers to the homework for Variables\n",
    "type: collab\n",
    "comments: true\n",
    "categories: [CSSE JavaScript Fundamentals]\n",
    "permalink: /csse/lessons/variables/homework\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lesson 1 homework - Level 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You are in charge of maintaining an illegal arcade. You bought shoddy arcade machines off of Temu and they sadly came with missing information. You need to help put back the missing information to allow your shady customers to lose all their money at your store."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a float variable to make the default score 0.00 so the grimy kids don't win when gambling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "vscode": {
     "languageId": "javascript"
    }
   },
   "outputs": [
    {
     "data": {
      "application/javascript": "// Would you use Let or Const?\nlet defaultscore = 0.00\nconsole.log(`The default score is ${defaultscore}`)\n",
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%js\n",
    "// Would you use Let or Const?\n",
    "let defaultscore = 0.00\n",
    "console.log(`The default score is ${defaultscore}`)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define a variable \"playerLimit\" that cannot be re-assigned and give it a value of 4. This will prevent the raggamuffins from ruining your game."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "vscode": {
     "languageId": "javascript"
    }
   },
   "outputs": [
    {
     "data": {
      "application/javascript": "const playerLimit = 4\nconsole.log(playerLimit)\n",
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%js\n",
    "const playerLimit = 4\n",
    "console.log(playerLimit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a string variable to store the players name. Those dirty children have to verify their victory somehow."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "vscode": {
     "languageId": "javascript"
    }
   },
   "outputs": [
    {
     "data": {
      "application/javascript": "let playerName = \"Yuna\"; \nconsole.log(playerName);\n",
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%js\n",
    "let playerName = \"Yuna\"; \n",
    "console.log(playerName);\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make a boolean to set gameFunction to false."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "vscode": {
     "languageId": "javascript"
    }
   },
   "outputs": [
    {
     "data": {
      "application/javascript": "let gameFunction = false; \nconsole.log(`Is the game function active? ${gameFunction}`);\n",
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%js\n",
    "let gameFunction = false; \n",
    "console.log(`Is the game function active? ${gameFunction}`);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now put it all together in this code cell to allow the children to gamble away all their parents money! The quick example may help you, it is for a superhero game the basement dwellers fixed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "vscode": {
     "languageId": "javascript"
    }
   },
   "outputs": [
    {
     "data": {
      "application/javascript": "// 1. Hero Name (String)\nlet heroName = prompt (\"your name\");\n\n// 2. Points Scored (Number)\nlet points = 0.0;\n\n// 3. Energy Levels (Number)\nlet energyLevel = 100.0;\n\n// 4. Mission Status (Boolean)\nlet missionComplete = false;\n\n// Training Simulation\nconsole.log(`Welcome, ${heroName}! Your training begins now.`);\nconsole.log(`Starting energy level: ${energyLevel}`);\nconsole.log(`Points: ${points}`);\n\n// Task 1\nenergyLevel -= 5.5;\npoints += 10;\nconsole.log(\"You completed a task!\");\nconsole.log(`Energy level: ${energyLevel}`);\nconsole.log(`Points: ${points}`);\n\n// Task 2\nenergyLevel -= 5.5;\npoints += 10;\nconsole.log(\"You completed another task!\");\nconsole.log(`Energy level: ${energyLevel}`);\nconsole.log(`Points: ${points}`);\n\n// Completing the mission\nmissionComplete = true;\nif (missionComplete) {\n    console.log(`Mission Accomplished, ${heroName}!`);\n    console.log(`Final score: ${points}`);\n}\n",
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%js\n",
    "// 1. Hero Name (String)\n",
    "let heroName = prompt (\"your name\");\n",
    "\n",
    "// 2. Points Scored (Number)\n",
    "let points = 0.0;\n",
    "\n",
    "// 3. Energy Levels (Number)\n",
    "let energyLevel = 100.0;\n",
    "\n",
    "// 4. Mission Status (Boolean)\n",
    "let missionComplete = false;\n",
    "\n",
    "// Training Simulation\n",
    "console.log(`Welcome, ${heroName}! Your training begins now.`);\n",
    "console.log(`Starting energy level: ${energyLevel}`);\n",
    "console.log(`Points: ${points}`);\n",
    "\n",
    "// Task 1\n",
    "energyLevel -= 5.5;\n",
    "points += 10;\n",
    "console.log(\"You completed a task!\");\n",
    "console.log(`Energy level: ${energyLevel}`);\n",
    "console.log(`Points: ${points}`);\n",
    "\n",
    "// Task 2\n",
    "energyLevel -= 5.5;\n",
    "points += 10;\n",
    "console.log(\"You completed another task!\");\n",
    "console.log(`Energy level: ${energyLevel}`);\n",
    "console.log(`Points: ${points}`);\n",
    "\n",
    "// Completing the mission\n",
    "missionComplete = true;\n",
    "if (missionComplete) {\n",
    "    console.log(`Mission Accomplished, ${heroName}!`);\n",
    "    console.log(`Final score: ${points}`);\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, create something that on run, defines a playername, sets a game score, and decreases some amount from it. Make sure to use console.log to print the playername and the variable before and after the operation. Go forth, future basement dwellers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "vscode": {
     "languageId": "javascript"
    }
   },
   "outputs": [
    {
     "data": {
      "application/javascript": "// 1. Player Name (String)\nlet playerName = (\"Yuna\");\n\n// 2. Game Score (Number)\nlet gameScore = 93;\n\n// 3. Task Completion (Boolean)\nlet taskCompleted = true;\n\n// Simulation Start\nconsole.log(`Welcome, ${playerName}! Let's begin the game.`);\nconsole.log(`Starting score: ${gameScore}`);\n\n// Task 1: Decrease game score\nlet decreaseAmount = 15;\ngameScore -= decreaseAmount;\ntaskCompleted = true; // Task was completed\nconsole.log(\"You completed your first task!\");\nconsole.log(`Updated score after losing ${decreaseAmount} points: ${gameScore}`);\n\n// Task 2: Decrease game score again\ndecreaseAmount = 10;\ngameScore -= decreaseAmount;\nconsole.log(\"You completed another task!\");\nconsole.log(`Updated score after losing ${decreaseAmount} points: ${gameScore}`);\n\n// Mission Status\nif (taskCompleted) {\n    console.log(`Well done, ${playerName}!`);\n    console.log(`Your final score: ${gameScore}`);\n}\n",
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%js\n",
    "// 1. Player Name (String)\n",
    "let playerName = (\"Yuna\");\n",
    "\n",
    "// 2. Game Score (Number)\n",
    "let gameScore = 93;\n",
    "\n",
    "// 3. Task Completion (Boolean)\n",
    "let taskCompleted = true;\n",
    "\n",
    "// Simulation Start\n",
    "console.log(`Welcome, ${playerName}! Let's begin the game.`);\n",
    "console.log(`Starting score: ${gameScore}`);\n",
    "\n",
    "// Task 1: Decrease game score\n",
    "let decreaseAmount = 15;\n",
    "gameScore -= decreaseAmount;\n",
    "taskCompleted = true; // Task was completed\n",
    "console.log(\"You completed your first task!\");\n",
    "console.log(`Updated score after losing ${decreaseAmount} points: ${gameScore}`);\n",
    "\n",
    "// Task 2: Decrease game score again\n",
    "decreaseAmount = 10;\n",
    "gameScore -= decreaseAmount;\n",
    "console.log(\"You completed another task!\");\n",
    "console.log(`Updated score after losing ${decreaseAmount} points: ${gameScore}`);\n",
    "\n",
    "// Mission Status\n",
    "if (taskCompleted) {\n",
    "    console.log(`Well done, ${playerName}!`);\n",
    "    console.log(`Your final score: ${gameScore}`);\n",
    "}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lesson 1 homework - Level 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This homework is harder than the last, to make sure you are efficient workers in the basement. You will now create code for a space invaders knockoff since we obviously can't afford to get the actual one. \n",
    "- Complete the code and READ THE COMMENTS. Don't leave any underscores and make some working code!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "vscode": {
     "languageId": "javascript"
    }
   },
   "outputs": [
    {
     "data": {
      "application/javascript": "// Put variables for spaceship and mission below\nlet spaceship = \"Starblazer\"; // Name your spaceship! The red will show up in the console once complete.\nlet initialFuel = 100; // Initial fuel value\nlet distanceTraveled = 0; // Set distance traveled\nlet fuelConsumptionRate = 2; // Fuel decrease rate per distance = 2\n\n// 2. Mission variables assigning\nlet selectedFuel = 50; // Assign how much fuel is allocated for the mission\nlet missionStatus = \"\"; // Status of the mission\nlet fuelDrops = Math.floor(Math.random() * 3) + 1; \n// Random fuel drops (1 to 3) - the minimum fuel drop is 1\n\n// 3. Add random fuel during the mission\nfunction collectFuel(currentFuel, distance) {\n  let fuelCollected = Math.floor(Math.random() * 21) + 10; // Random fuel between 10 and 30\n  console.log(`At distance ${distance}, a fuel drop was found! Collected ${fuelCollected} fuel.`);\n  return currentFuel + fuelCollected; // Add collected fuel to the current fuel\n}\n\n// 4. Mission logic - makes mission occur - don't worry about if-else statement\nif (selectedFuel > initialFuel) {\n  missionStatus = \"Mission failed. Not enough fuel!\"; // If selected fuel is greater than initial fuel, the mission fails\n} else if (selectedFuel <= 0) {\n  missionStatus = \"Mission aborted. Fuel must be greater than zero.\"; // If selected fuel is zero or less, the mission aborts\n} else {\n  // Beginning mission\n  for (let i = 0; i < fuelDrops; i++) {\n    // Calculates distance and updates remaining fuel\n    distanceTraveled += selectedFuel / fuelConsumptionRate;\n    initialFuel -= selectedFuel;\n\n    // Check if there’s still enough fuel for the mission\n    if (initialFuel <= 0) {\n      missionStatus = `Mission failed! The spaceship ran out of fuel after traveling ${distanceTraveled} units.`; // Mission fails if fuel runs out\n      break;\n    }\n\n    // Collect random fuel\n    initialFuel = collectFuel(initialFuel, distanceTraveled); \n  }\n\n  // Set end results of mission status\n  if (initialFuel > 0) {\n    missionStatus = `Mission successful! The spaceship ${spaceship} traveled ${distanceTraveled} units of distance. Remaining fuel: ${initialFuel}`; // Mission succeeds if fuel remains\n  }\n}\n\n// 5. Output the mission results - print the results\nconsole.log(`Spaceship: ${spaceship}`);\nconsole.log(`Fuel given: ${selectedFuel}`);\nconsole.log(`Distance traveled: ${distanceTraveled}`);\nconsole.log(`Remaining fuel: ${initialFuel}`);\nconsole.log(`Mission status: ${missionStatus}`);\n",
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%js\n",
    "// Put variables for spaceship and mission below\n",
    "let spaceship = \"Starblazer\"; // Name your spaceship! The red will show up in the console once complete.\n",
    "let initialFuel = 100; // Initial fuel value\n",
    "let distanceTraveled = 0; // Set distance traveled\n",
    "let fuelConsumptionRate = 2; // Fuel decrease rate per distance = 2\n",
    "\n",
    "// 2. Mission variables assigning\n",
    "let selectedFuel = 50; // Assign how much fuel is allocated for the mission\n",
    "let missionStatus = \"\"; // Status of the mission\n",
    "let fuelDrops = Math.floor(Math.random() * 3) + 1; \n",
    "// Random fuel drops (1 to 3) - the minimum fuel drop is 1\n",
    "\n",
    "// 3. Add random fuel during the mission\n",
    "function collectFuel(currentFuel, distance) {\n",
    "  let fuelCollected = Math.floor(Math.random() * 21) + 10; // Random fuel between 10 and 30\n",
    "  console.log(`At distance ${distance}, a fuel drop was found! Collected ${fuelCollected} fuel.`);\n",
    "  return currentFuel + fuelCollected; // Add collected fuel to the current fuel\n",
    "}\n",
    "\n",
    "// 4. Mission logic - makes mission occur - don't worry about if-else statement\n",
    "if (selectedFuel > initialFuel) {\n",
    "  missionStatus = \"Mission failed. Not enough fuel!\"; // If selected fuel is greater than initial fuel, the mission fails\n",
    "} else if (selectedFuel <= 0) {\n",
    "  missionStatus = \"Mission aborted. Fuel must be greater than zero.\"; // If selected fuel is zero or less, the mission aborts\n",
    "} else {\n",
    "  // Beginning mission\n",
    "  for (let i = 0; i < fuelDrops; i++) {\n",
    "    // Calculates distance and updates remaining fuel\n",
    "    distanceTraveled += selectedFuel / fuelConsumptionRate;\n",
    "    initialFuel -= selectedFuel;\n",
    "\n",
    "    // Check if there’s still enough fuel for the mission\n",
    "    if (initialFuel <= 0) {\n",
    "      missionStatus = `Mission failed! The spaceship ran out of fuel after traveling ${distanceTraveled} units.`; // Mission fails if fuel runs out\n",
    "      break;\n",
    "    }\n",
    "\n",
    "    // Collect random fuel\n",
    "    initialFuel = collectFuel(initialFuel, distanceTraveled); \n",
    "  }\n",
    "\n",
    "  // Set end results of mission status\n",
    "  if (initialFuel > 0) {\n",
    "    missionStatus = `Mission successful! The spaceship ${spaceship} traveled ${distanceTraveled} units of distance. Remaining fuel: ${initialFuel}`; // Mission succeeds if fuel remains\n",
    "  }\n",
    "}\n",
    "\n",
    "// 5. Output the mission results - print the results\n",
    "console.log(`Spaceship: ${spaceship}`);\n",
    "console.log(`Fuel given: ${selectedFuel}`);\n",
    "console.log(`Distance traveled: ${distanceTraveled}`);\n",
    "console.log(`Remaining fuel: ${initialFuel}`);\n",
    "console.log(`Mission status: ${missionStatus}`);\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- For you cheating basement dwellers, look away and go complete your code for minimal to no pay. \n",
    "- But for those of you who completed it, here is something to check your code with. Also make sure to run your own code and see it in console to ensure the gambling children can play the games."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "vscode": {
     "languageId": "javascript"
    }
   },
   "outputs": [
    {
     "data": {
      "application/javascript": "\nlet spaceship = \"Mort's Flying Monkey\";\nlet initialFuel = 100; \nlet distanceTraveled = 0; \nlet fuelConsumptionRate = 2; \n\nlet selectedFuel = 50; \nlet missionStatus = \"\"; \nlet fuelDrops = Math.floor(Math.random() * 3) + 1; \n\n\nfunction collectFuel(currentFuel, distance) {\n  let fuelCollected = Math.floor(Math.random() * 20) + 10; \n  console.log(`At distance ${distance}, a fuel drop was found! Collected ${fuelCollected} fuel.`);\n  return currentFuel + fuelCollected;\n}\n\nif (selectedFuel > initialFuel) {\n  missionStatus = \"Mission failed. Not enough fuel!\";\n} else if (selectedFuel <= 0) {\n  missionStatus = \"Mission aborted. Fuel must be greater than zero.\";\n} else {\n\n  for (let i = 0; i < fuelDrops; i++) {\n   \n    distanceTraveled += selectedFuel / fuelConsumptionRate;\n    initialFuel -= selectedFuel;\n\n    \n    if (initialFuel <= 0) {\n      missionStatus = `Mission failed! The spaceship ran out of fuel after traveling ${distanceTraveled} units.`;\n      break;\n    }\n\n    \n    initialFuel = collectFuel(initialFuel, distanceTraveled);\n  }\n\n  \n  if (initialFuel > 0) {\n    missionStatus = `Mission successful! The spaceship ${spaceship} traveled ${distanceTraveled} units of distance. Remaining fuel: ${initialFuel}`;\n  }\n}\n\nconsole.log(`Spaceship: ${spaceship}`);\nconsole.log(`Fuel given: ${selectedFuel}`);\nconsole.log(`Distance traveled: ${distanceTraveled}`);\nconsole.log(`Remaining fuel: ${initialFuel}`);\nconsole.log(`Mission Status: ${missionStatus}`);\n",
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%js\n",
    "\n",
    "let spaceship = \"Mort's Flying Monkey\";\n",
    "let initialFuel = 100; \n",
    "let distanceTraveled = 0; \n",
    "let fuelConsumptionRate = 2; \n",
    "\n",
    "let selectedFuel = 50; \n",
    "let missionStatus = \"\"; \n",
    "let fuelDrops = Math.floor(Math.random() * 3) + 1; \n",
    "\n",
    "\n",
    "function collectFuel(currentFuel, distance) {\n",
    "  let fuelCollected = Math.floor(Math.random() * 20) + 10; \n",
    "  console.log(`At distance ${distance}, a fuel drop was found! Collected ${fuelCollected} fuel.`);\n",
    "  return currentFuel + fuelCollected;\n",
    "}\n",
    "\n",
    "if (selectedFuel > initialFuel) {\n",
    "  missionStatus = \"Mission failed. Not enough fuel!\";\n",
    "} else if (selectedFuel <= 0) {\n",
    "  missionStatus = \"Mission aborted. Fuel must be greater than zero.\";\n",
    "} else {\n",
    "\n",
    "  for (let i = 0; i < fuelDrops; i++) {\n",
    "   \n",
    "    distanceTraveled += selectedFuel / fuelConsumptionRate;\n",
    "    initialFuel -= selectedFuel;\n",
    "\n",
    "    \n",
    "    if (initialFuel <= 0) {\n",
    "      missionStatus = `Mission failed! The spaceship ran out of fuel after traveling ${distanceTraveled} units.`;\n",
    "      break;\n",
    "    }\n",
    "\n",
    "    \n",
    "    initialFuel = collectFuel(initialFuel, distanceTraveled);\n",
    "  }\n",
    "\n",
    "  \n",
    "  if (initialFuel > 0) {\n",
    "    missionStatus = `Mission successful! The spaceship ${spaceship} traveled ${distanceTraveled} units of distance. Remaining fuel: ${initialFuel}`;\n",
    "  }\n",
    "}\n",
    "\n",
    "console.log(`Spaceship: ${spaceship}`);\n",
    "console.log(`Fuel given: ${selectedFuel}`);\n",
    "console.log(`Distance traveled: ${distanceTraveled}`);\n",
    "console.log(`Remaining fuel: ${initialFuel}`);\n",
    "console.log(`Mission Status: ${missionStatus}`);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lesson 2: Level 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You need to get the color of the cars from the frogger game. Use an instance variable called myCar to accomplish this. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "vscode": {
     "languageId": "javascript"
    }
   },
   "outputs": [
    {
     "data": {
      "application/javascript": "class Car {\n  constructor(color) {\n    this.color = color;  // Put your instance variable in the blank\n  }\n\n  getColor() {\n    return this.color;\n  }\n}\n\nconst myCar = new Car(\"red\"); // Choose any color\nconsole.log(myCar.getColor()); // Once run, you should see your color in the console\n",
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%js\n",
    "class Car {\n",
    "  constructor(color) {\n",
    "    this.color = color;  // Put your instance variable in the blank\n",
    "  }\n",
    "\n",
    "  getColor() {\n",
    "    return this.color;\n",
    "  }\n",
    "}\n",
    "\n",
    "const myCar = new Car(\"red\"); // Choose any color\n",
    "console.log(myCar.getColor()); // Once run, you should see your color in the console"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You need a static variable for player lives. Use the variable playerLives to set the number of lives to 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "vscode": {
     "languageId": "javascript"
    }
   },
   "outputs": [
    {
     "data": {
      "application/javascript": "class Health {\n  static playerLives = 3;  // Make static variable and set the number for it\n}\n\nconsole.log(Health.playerLives);  // Access the static variable and log it\n",
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%js\n",
    "class Health {\n",
    "  static playerLives = 3;  // Make static variable and set the number for it\n",
    "}\n",
    "\n",
    "console.log(Health.playerLives);  // Access the static variable and log it\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lesson 2 - Level 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a Book class with an instance variable title and a static variable bookCount that tracks how many books have been created. Add a method getBookInfo() to return the book's title and total number of books."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "vscode": {
     "languageId": "javascript"
    }
   },
   "outputs": [
    {
     "data": {
      "application/javascript": "class Book {\n  static bookCount = 0;  // Static variable to track number of books\n\n  constructor(title) {\n    this.title = title;  // Instance variable for title\n    Book.bookCount++;  // Increment the static variable\n  }\n\n  getBookInfo() {\n    return `Book Title: ${this.title}, Total Books: ${Book.bookCount}`; // Use instance and static variables\n  }\n}\n\nconst book1 = new Book(\"Mort's Guide to Making Students Fear You\");\nconst book2 = new Book(\"JavaScript Basics\"); // Example book title\nconsole.log(book1.getBookInfo()); // Output: Book Title: Mort's Guide to Making Students Fear You, Total Books: 2\nconsole.log(book2.getBookInfo()); // Output: Book Title: JavaScript Basics, Total Books: 2\n",
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%js\n",
    "class Book {\n",
    "  static bookCount = 0;  // Static variable to track number of books\n",
    "\n",
    "  constructor(title) {\n",
    "    this.title = title;  // Instance variable for title\n",
    "    Book.bookCount++;  // Increment the static variable\n",
    "  }\n",
    "\n",
    "  getBookInfo() {\n",
    "    return `Book Title: ${this.title}, Total Books: ${Book.bookCount}`; // Use instance and static variables\n",
    "  }\n",
    "}\n",
    "\n",
    "const book1 = new Book(\"Mort's Guide to Making Students Fear You\");\n",
    "const book2 = new Book(\"JavaScript Basics\"); // Example book title\n",
    "console.log(book1.getBookInfo()); // Output: Book Title: Mort's Guide to Making Students Fear You, Total Books: 2\n",
    "console.log(book2.getBookInfo()); // Output: Book Title: JavaScript Basics, Total Books: 2\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create an ArcadeGame class that:\n",
    "- Has instance variables gameName and highScore.\n",
    "- Has a static variable totalGames to track how many - arcade games have been created.\n",
    "- Includes a method getGameInfo() to return the game name and high score.\n",
    "- Includes a static method getTotalGames() to return the total number of arcade games created."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "javascript"
    }
   },
   "outputs": [
    {
     "data": {
      "application/javascript": "class ArcadeGame {\n  static totalGames = 0;  // Static variable to track total number of games\n\n  constructor(gameName, highScore) {\n    this.gameName = gameName;  // Instance variable for game name\n    this.highScore = highScore;  // Instance variable for high score\n    ArcadeGame.totalGames++;  // Increment static variable each time a new game is created\n  }\n\n  // Instance method to return the game name and high score\n  getGameInfo() {\n    return `${this.gameName}: High Score = ${this.highScore}`;\n  }\n\n  // Static method to get the total number of games\n  static getTotalGames() {\n    return ArcadeGame.totalGames;\n  }\n}\n\n// Create instances of the ArcadeGame class\nconst game1 = new ArcadeGame(\"Space Invaders\", 5000);\nconst game2 = new ArcadeGame(\"Pac-Man\", 7000);\n\n// Display game info\nconsole.log(game1.getGameInfo()); // Output: Space Invaders: High Score = 5000\nconsole.log(game2.getGameInfo()); // Output: Pac-Man: High Score = 7000\n\n// Display total arcade games count\nconsole.log(ArcadeGame.getTotalGames()); // Output: 2\n",
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%js\n",
    "class ArcadeGame {\n",
    "  static totalGames = 0;  // Static variable to track total number of games\n",
    "\n",
    "  constructor(gameName, highScore) {\n",
    "    this.gameName = gameName;  // Instance variable for game name\n",
    "    this.highScore = highScore;  // Instance variable for high score\n",
    "    ArcadeGame.totalGames++;  // Increment static variable each time a new game is created\n",
    "  }\n",
    "\n",
    "  // Instance method to return the game name and high score\n",
    "  getGameInfo() {\n",
    "    return `${this.gameName}: High Score = ${this.highScore}`;\n",
    "  }\n",
    "\n",
    "  // Static method to get the total number of games\n",
    "  static getTotalGames() {\n",
    "    return ArcadeGame.totalGames;\n",
    "  }\n",
    "}\n",
    "\n",
    "// Create instances of the ArcadeGame class\n",
    "const game1 = new ArcadeGame(\"Space Invaders\", 5000);\n",
    "const game2 = new ArcadeGame(\"Pac-Man\", 7000);\n",
    "\n",
    "// Display game info\n",
    "console.log(game1.getGameInfo()); // Output: Space Invaders: High Score = 5000\n",
    "console.log(game2.getGameInfo()); // Output: Pac-Man: High Score = 7000\n",
    "\n",
    "// Display total arcade games count\n",
    "console.log(ArcadeGame.getTotalGames()); // Output: 2\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
